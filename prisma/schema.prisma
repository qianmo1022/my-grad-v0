// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

// 用户模型
model User {
  id                 String               @id @default(uuid())
  email              String               @unique
  password           String
  firstName          String?
  lastName           String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  preferences        UserPreference[]
  browsingHistory    BrowsingHistory[]
  savedConfigurations SavedConfiguration[]
  orders             Order[]
  reviews            Review[]            // 用户评价
  notifications      Notification[]      // 用户通知
}

// 商家模型
model Dealer {
  id           String   @id @default(uuid())
  email        String   @unique
  password     String
  name         String
  businessId   String   @unique
  phone        String?
  logo         String?  // 商家logo
  businessName String?  // 商店名称
  address      String?  // 商店地址
  city         String?  // 城市
  province     String?  // 省份
  postalCode   String?  // 邮政编码
  businessHours String? // 营业时间
  description  String?  @db.Text // 商店描述
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orders       Order[]
  customers    Customer[] // 关联到客户
  salesData    SalesData[] // 关联到销售数据
}

// 客户模型
model Customer {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  phone       String?
  status      String    @default("active") // active, inactive
  totalSpent  Float     @default(0)
  lastOrderDate DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  dealer      Dealer    @relation(fields: [dealerId], references: [id], onDelete: Cascade)
  dealerId    String
  orders      Order[]   // 关联的订单

  @@index([dealerId])
}

// 销售数据模型
model SalesData {
  id          String    @id @default(uuid())
  date        DateTime
  revenue     Float
  orderCount  Int
  period      String    // daily, weekly, monthly, yearly
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  dealer      Dealer    @relation(fields: [dealerId], references: [id], onDelete: Cascade)
  dealerId    String
  
  @@index([dealerId])
  @@index([date])
}

// 汽车模型
model Car {
  id                 String               @id
  name               String
  basePrice          Float
  description        String
  thumbnail          String
  defaultColor       String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  browsingHistory    BrowsingHistory[]
  savedConfigurations SavedConfiguration[]
  orders             Order[]
  features           CarFeature[]         // 车型特性
  configOptions      CarConfigOption[]    // 车型配置选项
  reviews            Review[]             // 车型评价
}

// 用户偏好模型
model UserPreference {
  id        String   @id @default(uuid())
  name      String
  value     Int      // 1-5 的偏好程度
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([userId])
}

// 浏览历史模型
model BrowsingHistory {
  id        String   @id @default(uuid())
  timestamp DateTime @default(now())
  duration  Int      // 浏览时长（秒）
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  car       Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId     String

  @@index([userId])
  @@index([carId])
}

// 保存的配置模型
model SavedConfiguration {
  id        String   @id @default(uuid())
  options   Json     // 存储为JSON格式的配置选项
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  car       Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId     String

  @@index([userId])
  @@index([carId])
}

// 订单模型
model Order {
  id          String   @id @default(uuid())
  amount      Float
  status      String   // pending, processing, completed, cancelled
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  dealer      Dealer   @relation(fields: [dealerId], references: [id])
  dealerId    String
  car         Car      @relation(fields: [carId], references: [id])
  carId       String
  // 订单配置选项
  configuration Json
  // 与客户关联
  customer    Customer? @relation(fields: [customerId], references: [id])
  customerId  String?

  @@index([userId])
  @@index([dealerId])
  @@index([carId])
  @@index([customerId])
}

// 车型特性模型
model CarFeature {
  id        String   @id @default(uuid())
  featureKey String  // 特性的键，如 acceleration, handling 等
  name      String   // 特性的显示名称
  score     Int      // 1-5 的分数
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  car       Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId     String

  @@index([carId])
  @@unique([carId, featureKey])
}

// 车型配置选项分类模型
model CarConfigCategory {
  id          String            @id @default(uuid())
  categoryKey String            // 分类的键，如 exterior-color, wheels 等
  name        String            // 分类的显示名称
  description String            // 分类的描述
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  options     CarConfigOption[]

  @@unique([categoryKey])
}

// 车型配置选项模型
model CarConfigOption {
  id          String           @id @default(uuid())
  optionKey   String           // 选项的键，如 black, sport 等
  name        String           // 选项的显示名称
  description String           // 选项的描述
  price       Float            // 选项的额外价格
  thumbnail   String?          // 选项的缩略图
  colorCode   String?          // 颜色代码（仅适用于颜色选项）
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  car         Car              @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId       String
  category    CarConfigCategory @relation(fields: [categoryId], references: [id])
  categoryId  String

  @@index([carId])
  @@index([categoryId])
  @@unique([carId, categoryId, optionKey])
}

// 评价模型
model Review {
  id             String   @id @default(uuid())
  title          String
  content        String   @db.Text
  rating         Int      // 1-5星
  helpful        Int      @default(0) // 有帮助数量
  verified       Boolean  @default(false) // 是否是已验证购买
  images         String[] // 评价图片URL列表
  tags           String[] // 评价标签
  configurationId String?  // 关联的配置ID（可选）
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  car            Car      @relation(fields: [carId], references: [id])
  carId          String

  @@index([userId])
  @@index([carId])
}

// 通知类型枚举
enum NotificationType {
  SYSTEM
  ORDER
  REVIEW
  PROMOTION
}

// 通知模型
model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  title     String
  message   String           @db.Text
  read      Boolean          @default(false) // 是否已读
  link      String?          // 相关链接（可选）
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([userId])
}
