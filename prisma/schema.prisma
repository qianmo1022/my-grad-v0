generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id                  String               @id @default(uuid())
  email               String               @unique
  password            String
  firstName           String?
  lastName            String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  browsingHistory     BrowsingHistory[]
  notifications       Notification[]
  orders              Order[]
  reviews             Review[]
  helpfulMarks        ReviewHelpful[]
  savedConfigurations SavedConfiguration[]
  preferences         UserPreference[]
}

model Dealer {
  id            String      @id @default(uuid())
  email         String      @unique
  password      String
  name          String
  businessId    String      @unique
  phone         String?
  logo          String?
  businessName  String?
  address       String?
  city          String?
  province      String?
  postalCode    String?
  businessHours String?
  description   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  customers     Customer[]
  orders        Order[]
  salesData     SalesData[]
  cars          Car[]
}

model Customer {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  phone         String?
  status        String    @default("active")
  totalSpent    Float     @default(0)
  lastOrderDate DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  dealerId      String
  dealer        Dealer    @relation(fields: [dealerId], references: [id], onDelete: Cascade)
  orders        Order[]

  @@index([dealerId])
}

model SalesData {
  id         String   @id @default(uuid())
  date       DateTime
  revenue    Float
  orderCount Int
  period     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  dealerId   String
  dealer     Dealer   @relation(fields: [dealerId], references: [id], onDelete: Cascade)

  @@index([dealerId])
  @@index([date])
}

model Car {
  id                  String               @id
  name                String
  basePrice           Float
  description         String
  thumbnail           String
  defaultColor        String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  status              String               @default("active")
  dealerId            String?
  dealer              Dealer?              @relation(fields: [dealerId], references: [id])
  browsingHistory     BrowsingHistory[]
  features            CarFeature[]
  orders              Order[]
  reviews             Review[]
  savedConfigurations SavedConfiguration[]
  configOptions       CarConfigOption[]
  
  @@index([dealerId])
}

model UserPreference {
  id        String   @id @default(uuid())
  name      String
  value     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model BrowsingHistory {
  id        String   @id @default(uuid())
  timestamp DateTime @default(now())
  duration  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  carId     String
  car       Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([carId])
}

model SavedConfiguration {
  id         String   @id @default(uuid())
  options    Json
  timestamp  DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  carId      String
  totalPrice Float    @default(0)
  car        Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([carId])
}

model Order {
  id            String    @id @default(uuid())
  amount        Float
  status        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  dealerId      String
  carId         String
  configuration Json
  customerId    String?
  car           Car       @relation(fields: [carId], references: [id])
  customer      Customer? @relation(fields: [customerId], references: [id])
  dealer        Dealer    @relation(fields: [dealerId], references: [id])
  user          User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([dealerId])
  @@index([carId])
  @@index([customerId])
}

model CarFeature {
  id         String   @id @default(uuid())
  featureKey String
  name       String
  score      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  carId      String
  car        Car      @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@unique([carId, featureKey])
  @@index([carId])
}

model CarConfigCategory {
  id          String            @id @default(uuid())
  categoryKey String
  name        String
  description String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  options     CarConfigOption[]
}

model CarConfigOption {
  id          String            @id @default(uuid())
  optionKey   String
  name        String
  description String
  price       Float
  thumbnail   String?
  colorCode   String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  carId       String
  categoryId  String
  car         Car               @relation(fields: [carId], references: [id], onDelete: Cascade)
  category    CarConfigCategory @relation(fields: [categoryId], references: [id])

  @@unique([carId, categoryId, optionKey])
  @@index([carId])
  @@index([categoryId])
}

model Review {
  id              String          @id @default(uuid())
  title           String
  content         String
  rating          Int
  helpful         Int             @default(0)
  verified        Boolean         @default(false)
  images          String[]
  tags            String[]
  configurationId String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  userId          String
  carId           String
  car             Car             @relation(fields: [carId], references: [id])
  user            User            @relation(fields: [userId], references: [id])
  helpfulMarks    ReviewHelpful[]

  @@index([userId])
  @@index([carId])
}

model ReviewHelpful {
  id        String   @id @default(uuid())
  reviewId  String
  userId    String
  createdAt DateTime @default(now())
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reviewId, userId])
  @@index([reviewId])
  @@index([userId])
}

model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  title     String
  message   String
  read      Boolean          @default(false)
  link      String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum NotificationType {
  SYSTEM
  ORDER
  REVIEW
  PROMOTION
}
